import { Injectable } from '@angular/core';
import { PoDynamicFormField } from '@po-ui/ng-components';
import { ApiService } from './api.service';
import { FormularioComponent } from '../components/orcamentos/formulario/formulario.component';

@Injectable({
  providedIn: 'root'
})
export class FieldsService {

  constructor(private api: ApiService) { }

    private readonly loadingLocations: Array<any> = [
      { loadingLocation: 'Matriz',              code: "01010001", isQuotation: true   },
      { loadingLocation: 'Grossos',             code: "01010002", isQuotation: true   },
      { loadingLocation: 'São Camilo',          code: "01010003", isQuotation: true   },
      { loadingLocation: 'Refinorte',           code: "02010001", isQuotation: true   },
      { loadingLocation: 'Qualysal',            code: "03010001", isQuotation: true   },
      { loadingLocation: 'São Paulo',           code: "01020009", isQuotation: false  },
      { loadingLocation: 'Rio de Janeiro',      code: "01030010", isQuotation: false  },
    ]

    private readonly budgetStatuses: Array<any> = [
      { budgetStatus: 'Cotação pendente',         code: "CP" },
      { budgetStatus: 'Cotação rejeitada',        code: "CR" },
      { budgetStatus: 'Pré Pedido pendente',      code: "PP" },
      { budgetStatus: 'Pré pedido em aprovação',  code: "PE" },
      { budgetStatus: 'Pré Pedido rejeitado',     code: "PR" },
      { budgetStatus: 'Pré Pedido aprovado',      code: "PA" },
      { budgetStatus: 'Orçamento expirado',       code: "EX" },
    ];

    private readonly customerCategories: Array<any> = [
      { code: 'DT', label: 'Distribuidor'               },
      { code: 'AT', label: 'Atacado'                    },
      { code: 'VR', label: 'Varejo'                     },
      { code: 'AJ', label: 'Atacarejo'                  },
      { code: 'CB', label: 'Cesta Básica'               },
      { code: 'FS', label: 'Food Service'               },
      { code: 'IA', label: 'Indústria de Alimentos'     },
      { code: 'IT', label: 'Indústria Têxtil'           },
      { code: 'IL', label: 'Indústria de Limpeza'       },
      { code: 'IG', label: 'Indústria Geral'            },
      { code: 'IR', label: 'Indústria de Ração Animal'  },
      { code: 'CH', label: 'Charqueadas'                },
      { code: 'PC', label: 'Pecuaristas e Avicultores'  },
      { code: 'TA', label: 'Tratamento de Água'         },
    ];

    private readonly freightTypes: Array<any> = [
      { freightType: 'CIF', code: 'C' },
      { freightType: 'CIF', code: 'C' },
      { freightType: 'FOB', code: 'F' },
      { freightType: 'FOB', code: 'F' },
    ];

  private readonly transportationModes: Array<any> = [
      { transportationMode: 'Rodoviário' , code: 'R' },
      { transportationMode: 'Rodoviário' , code: 'R' },
      { transportationMode: 'Marítimo'   , code: 'M' },
      { transportationMode: 'Marítimo'   , code: 'M' },
    ];

  private readonly containerTypes: Array<any> = [
      { containerType: 'Container 20'    , code: 'C20' },
      { containerType: 'Container 20'    , code: 'C20' },
      { containerType: 'Container 40'    , code: 'C40' },
      { containerType: 'Container 40'    , code: 'C40' },
    ];

  private readonly unloadingTypes: Array<any> = [
      { unloadingType: 'Por conta do cliente' ,                 code: 'C' },
      { unloadingType: 'Por conta do cliente' ,                 code: 'C' },
      { unloadingType: 'Por conta do motorista (Leva Chapas)',  code: 'L' },
      { unloadingType: 'Por conta do motorista (Paga Taxa)',    code: 'P' },
    ];

  private readonly cargoTypes: Array<any> = [
      { cargoType: 'Batida'                       , code: 'BT' },
      { cargoType: 'Pallet PBR com Forro'         , code: 'PC' },
      { cargoType: 'Pallet PBR sem Forro'         , code: 'PS' },
      { cargoType: 'Pallet Descartável com Forro' , code: 'DC' },
      { cargoType: 'Pallet Descartável sem Forro' , code: 'DS' },
    ];

    private readonly states: Array<any> = [
      { code: 'AC', label: 'Acre' },
      { code: 'AL', label: 'Alagoas' },
      { code: 'AP', label: 'Amapá' },
      { code: 'AM', label: 'Amazonas' },
      { code: 'BA', label: 'Bahia' },
      { code: 'CE', label: 'Ceará' },
      { code: 'DF', label: 'Distrito Federal' },
      { code: 'ES', label: 'Espírito Santo' },
      { code: 'GO', label: 'Goiás' },
      { code: 'MA', label: 'Maranhão' },
      { code: 'MT', label: 'Mato Grosso' },
      { code: 'MS', label: 'Mato Grosso do Sul' },
      { code: 'MG', label: 'Minas Gerais' },
      { code: 'PA', label: 'Pará' },
      { code: 'PB', label: 'Paraíba' },
      { code: 'PR', label: 'Paraná' },
      { code: 'PE', label: 'Pernambuco' },
      { code: 'PI', label: 'Piauí' },
      { code: 'RJ', label: 'Rio de Janeiro' },
      { code: 'RN', label: 'Rio Grande do Norte' },
      { code: 'RS', label: 'Rio Grande do Sul' },
      { code: 'RO', label: 'Rondônia' },
      { code: 'RR', label: 'Roraima' },
      { code: 'SC', label: 'Santa Catarina' },
      { code: 'SP', label: 'São Paulo' },
      { code: 'SE', label: 'Sergipe' },
      { code: 'TO', label: 'Tocantins' }
    ]

  public getFields(env: any): Array<PoDynamicFormField> {
    let fields = [
      {
        property: 'loadingLocation',
        label: 'Unidade Carreg.',
        visible: true,
        required: true,
        showRequired: true,
        disabled: !!env.headerData.loadingLocation,
        noAutocomplete: true,
        gridColumns: 4,
        options: this.loadingLocations,
        type: 'string',
        fieldValue: 'code',
        fieldLabel: 'loadingLocation',
        order: 1,
      },
      {
        property: 'budgetId',
        label: 'Cód. Orçamento',
        visible: true,
        required: false,
        showRequired: false,
        disabled: true,
        noAutocomplete: true,
        gridColumns: 3,
        type: 'string',
        order: 1,
      },
      {
        property: 'budgetStatus',
        label: 'Sit. Orçamento',
        visible: true,
        required: false,
        showRequired: false,
        disabled: true,
        noAutocomplete: true,
        gridColumns: 4,
        options: this.budgetStatuses,
        type: 'string',
        fieldValue: 'code',
        fieldLabel: 'budgetStatus',
        order: 1,
      },
      {
        property: 'customerId',
        label: 'Cliente',
        visible: !env.headerData.customerId,
        required: true,
        showRequired: true,
        disabled: !env.headerData.loadingLocation || !!env.headerData.customerId || env.isViewMode(),
        noAutocomplete: true,
        minLength: 3,
        maxLength: 6,
        gridColumns: 6,
        type: 'string',
        searchService: env.customerService,
        columns: [
          { property: 'codigo', label: 'Código' },
          { property: 'cgc', label: 'CNPJ' },
          { property: 'tipo', label: 'Tipo' },
          { property: 'razaoSocial', label: 'Nome' },
        ],
        format: ['cgc', 'razaoSocial'],
        fieldLabel: 'razaoSocial',
        fieldValue: 'codigoLoja',
        order: 1,
      },
      {
        property: 'customerIdDisabled',
        label: 'Cliente',
        visible: !!env.headerData.customerId,
        required: true,
        showRequired: true,
        disabled: true,
        noAutocomplete: true,
        minLength: 3,
        maxLength: 6,
        gridColumns: 6,
        type: 'string',
        searchService: env.customerService,
        columns: [
          { property: 'codigo', label: 'Código' },
          { property: 'cgc', label: 'CNPJ' },
          { property: 'tipo', label: 'Tipo' },
          { property: 'razaoSocial', label: 'Nome' },
        ],
        format: ['cgc', 'razaoSocial'],
        fieldLabel: 'razaoSocial',
        fieldValue: 'codigoLoja',
        order: 1,
      },
      {
        property: 'customerHasIE',
        label: 'Possui IE?',
        visible: true,
        required: false,
        showRequired: false,
        disabled: true,
        noAutocomplete: true,
        maxLength: 3,
        gridColumns: 2,
        options: [
          { label: 'Sim', code: true  },
          { label: 'Sim', code: true  },
          { label: 'Não', code: false },
          { label: 'Não', code: false },
        ],
        type: 'boolean',
        fieldValue: 'code',
        fieldLabel: 'label',
        order: 1,
      },
      {
        property: 'customerCategory',
        label: 'Categoria Cliente',
        visible: true,
        required: false,
        showRequired: false,
        disabled: true,
        noAutocomplete: true,
        maxLength: 20,
        gridColumns: 4,
        options: this.customerCategories,
        type: 'string',
        fieldValue: 'code',
        fieldLabel: 'label',
        order: 1,
      },
      {
        property: 'paymentTerms',
        label: 'Cond. Pag. Produtos',
        visible: true,
        required: true,
        showRequired: true,
        disabled: !env.headerData.loadingLocation || env.isViewMode(),
        noAutocomplete: true,
        minLength: 3,
        maxLength: 40,
        gridColumns: 3,
        type: 'string',
        searchService: this.api.baseUrl+'/portal-do-representante/condicoes',
        columns: [
          { property: 'codigo', label: 'Código' },
          { property: 'descricao', label: 'Descrição' },
        ],
        format: ['codigo', 'descricao'],
        fieldLabel: 'descricao',
        fieldValue: 'codigo',
        order: 1,
      },
      {
        property: 'financialDiscount',
        label: 'Desconto Financ. (%)',
        visible: true,
        required: false,
        showRequired: false,
        disabled: !env.headerData.loadingLocation || env.isViewMode(),
        noAutocomplete: true,
        type: 'currency',
        maxLength: 4,
        gridColumns: 2,
        format: 'BRL',
        order: 1
      },
      {
        property: 'observation',
        label: 'Observação',
        visible: true,
        required: false,
        showRequired: false,
        disabled: !env.headerData.loadingLocation || env.isViewMode(),
        noAutocomplete: true,
        maxLength: 120,
        gridColumns: 12,
        type: 'string',
        rows: 1,
        order: 1,
      },
      {
        property: 'freightType',
        label: 'Tipo Frete',
        visible: true,
        required: true,
        showRequired: true,
        disabled: env.isViewMode(),
        noAutocomplete: true,
        maxLength: 3,
        gridColumns: 3,
        options: this.freightTypes,
        type: 'string',
        fieldValue: 'code',
        fieldLabel: 'freightType',
        order: 2,
      },
      {
        property: 'freightPaymentTerms',
        label: 'Cond. Pag. Frete',
        visible: env.isQuotationBranch,
        required: true,
        showRequired: false,
        disabled: !env.headerData.freightType,
        noAutocomplete: true,
        minLength: 3,
        maxLength: 40,
        gridColumns: 3,
        type: 'string',
        searchService: this.api.baseUrl+'/portal-do-representante/condicoes',
        columns: [
          { property: 'codigo', label: 'Código' },
          { property: 'descricao', label: 'Descrição' },
        ],
        format: ['codigo', 'descricao'],
        fieldLabel: 'descricao',
        fieldValue: 'codigo',
        order: 2,
      },
      {
        property: 'freightCost',
        label: 'Frete Base (R$/Ton)',
        visible: true,
        required: false,
        showRequired: false,
        noAutocomplete: true,
        disabled: !env.headerData.freightResponsible,
        type: 'currency',
        maxLength: 20,
        gridColumns: 2,
        format: 'BRL',
        order: 2
      },
      {
        property: 'freightResponsible',
        label: 'Vendedor Responsável pelo Frete?',
        visible: true,
        required: false,
        showRequired: false,
        noAutocomplete: true,
        disabled: !env.headerData.freightType,
        type: 'boolean',
        booleanTrue: 'Sim',
        booleanFalse: 'Não',
        gridColumns: 3,
        order: 2
      },
      {
        property: 'transportationMode',
        label: 'Tipo de Veículo',
        visible: true,
        required: false,
        showRequired: false,
        disabled: !this.isQuotationBranch(env.headerData.loadingLocation) || !env.headerData.freightType,
        noAutocomplete: true,
        minLength: 1,
        maxLength: 1,
        gridColumns: 2,
        options: this.transportationModes,
        type: 'string',
        fieldValue: 'code',
        fieldLabel: 'transportationMode',
        order: 2,
      },
      {
        property: 'containerType',
        label: 'Tipo de Container',
        visible: env.headerData.transportationMode === 'M',
        required: false,
        showRequired: false,
        disabled: !env.headerData.freightResponsible,
        noAutocomplete: true,
        minLength: 2,
        maxLength: 2,
        gridColumns: 2,
        options: this.containerTypes,
        type: 'string',
        fieldValue: 'code',
        fieldLabel: 'containerType',
        order: 2,
      },
      {
        property: 'customerVehicle',
        label: 'Veículo Próprio?',
        visible: env.headerData.transportationMode === 'R',
        required: false,
        showRequired: false,
        noAutocomplete: true,
        disabled: env.headerData.freightType !== 'F',
        type: 'boolean',
        booleanTrue: 'Sim',
        booleanFalse: 'Não',
        gridColumns: 2,
        order: 2
      },
      {
        property: 'maxLoad',
        label: 'Carga Máxima (kg)',
        visible: env.isQuotationBranch,
        required: true,
        showRequired: false,
        noAutocomplete: true,
        disabled: !env.headerData.freightType || env.headerData.transportationMode === 'M' || !env.headerData.freightType,
        type: 'number',
        maxLength: 10,
        gridColumns: 2,
        format: '1.0-0',
        order: 2
      },
      {
        property: 'unloadingType',
        label: 'Tipo Descarga',
        visible: true,
        required: true,
        showRequired: false,
        disabled: !env.headerData.freightType,
        noAutocomplete: true,
        minLength: 1,
        maxLength: 1,
        gridColumns: 4,
        options: this.unloadingTypes,
        type: 'string',
        fieldValue: 'code',
        fieldLabel: 'unloadingType',
        order: 2,
      },
      {
        property: 'unloadingCost',
        label: 'Vlr. Descarga (R$/Ton)',
        visible: true,
        required: true,
        showRequired: false,
        disabled: !env.headerData.freightType || env.headerData.unloadingType === 'C',
        noAutocomplete: true,
        type: 'currency',
        maxLength: 20,
        gridColumns: 2,
        format: 'BRL',
        order: 2
      },
      {
        property: 'destinationState',
        label: 'UF Destino',
        visible: true,
        required: true,
        showRequired: false,
        disabled: !env.headerData.freightType,
        noAutocomplete: true,
        maxLength: 2,
        gridColumns: 2,
        type: 'string',
        options: this.states,
        fieldValue: 'code',
        fieldLabel: 'code',
        order: 2,
      },
      {
        property: 'destinationCity',
        label: 'Cidade Destino',
        visible: true,
        required: true,
        showRequired: false,
        disabled: !env.headerData.freightType,
        gridColumns: 4,
        type: 'string',
        searchService: env.cityServiceWrapper,
        columns: [
          { property: 'codigo', label: 'Código IBGE' },
          { property: 'cidade', label: 'Cidade' },
          { property: 'estado', label: 'Estado' },
        ],
        format: ['codigo', 'cidade'],
        fieldLabel: 'cidade',
        fieldValue: 'codigo',
        order: 2,
      },
      {
        property: 'cargoType',
        label: 'Tipo Carga',
        visible: true,
        required: true,
        showRequired: false,
        disabled: !env.headerData.freightType,
        noAutocomplete: true,
        minLength: 2,
        maxLength: 2,
        gridColumns: 3,
        options: this.cargoTypes,
        type: 'string',
        fieldValue: 'code',
        fieldLabel: 'cargoType',
        order: 2,
      },
      {
        property: 'palletPattern10x1',
        label: 'Padrão Palete 10x1',
        visible: true,
        required: true,
        showRequired: false,
        noAutocomplete: true,
        disabled: !env.headerData.freightType || env.headerData.cargoType === 'BT',
        type: 'number',
        maxLength: 3,
        gridColumns: 2,
        format: '1.0-0',
        order: 2
      },
      {
        property: 'palletPattern30x1',
        label: 'Padrão Palete 30x1',
        visible: true,
        required: true,
        showRequired: false,
        noAutocomplete: true,
        disabled: !env.headerData.freightType || env.headerData.cargoType === 'BT',
        type: 'number',
        maxLength: 3,
        gridColumns: 2,
        format: '1.0-0',
        order: 2
      },
      {
        property: 'palletPattern25kg',
        label: 'Padrão Palete 25kg',
        visible: true,
        required: true,
        showRequired: false,
        noAutocomplete: true,
        disabled: !env.headerData.freightType || env.headerData.cargoType === 'BT',
        type: 'number',
        maxLength: 3,
        gridColumns: 2,
        format: '1.0-0',
        order: 2
      },
      {
        property: 'palletReturn',
        label: 'Devolução Pallet?',
        visible: true,
        required: false,
        showRequired: false,
        noAutocomplete: true,
        disabled: !env.headerData.freightType || env.headerData.cargoType === 'BT',
        type: 'boolean',
        booleanTrue: 'Sim',
        booleanFalse: 'Não',
        gridColumns: 2,
        order: 2
      }
    ];
    if (env.isViewMode()) {
      fields = fields.map(field => {
        field.disabled = true;
        return field;
      });
    }
    return fields;
  }

  public getColumns(env: any): Array<any> {
    return [
      {
        property: 'item',
        label: 'Item',
        type: 'string',
        required: true,
        showRequired: false,
        disabled: true,
        noAutocomplete: true,
        minLength: 2,
        maxLength: 4,
        gridColumns: 1,
      },
      {
        property: 'productId',
        label: 'Cód. Produto',
        type: 'string',
        required: true,
        showRequired: false,
        disabled: env.isViewMode(),
        noAutocomplete: true,
        maxLength: 20,
        searchService: this.api.baseUrl+'/portal-do-representante/produtos',
        columns: [
          { property: 'codigo', label: 'Código' },
          { property: 'descricao', label: 'Descrição' },
        ],
        format: ['codigo'],
        fieldValue: 'codigo',
        gridColumns: 2,
      },
      {
        property: 'productDescription',
        label: 'Desc. Produto',
        type: 'string',
        required: false,
        showRequired: false,
        disabled: true,
        noAutocomplete: true,
        maxLength: 60,
        gridColumns: 6,
      },
      {
        property: 'amount',
        label: 'Quantidade',
        type: 'number',
        required: true,
        showRequired: false,
        disabled: env.isViewMode(),
        noAutocomplete: true,
        maxLength: 10,
        gridColumns: 2,
        format: '1.2-2',
      },
      {
        property: 'packagingType',
        label: 'Embalagem',
        type: 'string',
        required: false,
        showRequired: false,
        disabled: true,
        noAutocomplete: true,
        maxLength: 20,
        gridColumns: 2,
      },
      {
        property: 'fobBasePrice',
        label: 'Valor FOB Base',
        type: 'currency',
        required: false,
        showRequired: false,
        visible: false,
        disabled: env.isViewMode(),
        noAutocomplete: true,
        maxLength: 20,
        gridColumns: 2,
        format: 'BRL',
      },
      {
        property: 'unitPrice',
        label: 'Valor Unit. Efetivo',
        type: 'currency',
        required: false,
        showRequired: false,
        disabled: true,
        noAutocomplete: true,
        maxLength: 20,
        gridColumns: 2,
        format: 'BRL',
      },
      {
        property: 'totalPrice',
        label: 'Valor Total',
        type: 'currency',
        required: false,
        showRequired: false,
        disabled: true,
        noAutocomplete: true,
        maxLength: 20,
        gridColumns: 2,
        format: 'BRL',
      },
      {
        property: 'tes',
        label: 'TES',
        type: 'string',
        required: false,
        showRequired: false,
        disabled: false,
        visible: false,
        noAutocomplete: true,
        maxLength: 3,
        gridColumns: 2,
      },
      {
        property: 'comissionPercentage',
        label: 'Comissão (%)',
        type: 'number',
        required: false,
        showRequired: false,
        disabled: true,
        noAutocomplete: true,
        maxLength: 3,
        gridColumns: 2,
      },
      {
        property: 'comissionUnitValue',
        label: 'Vl. Unit. Comissão',
        type: 'currency',
        required: false,
        showRequired: false,
        disabled: true,
        noAutocomplete: true,
        maxLength: 20,
        gridColumns: 2,
        format: 'BRL',
      },
      {
        property: 'comissionTotalValue',
        label: 'Vl. Total Comissão',
        type: 'currency',
        required: false,
        showRequired: false,
        disabled: true,
        noAutocomplete: true,
        maxLength: 20,
        gridColumns: 2,
        format: 'BRL',
      },
      {
        property: 'productNetWeight',
        label: 'Peso Neto Produto',
        type: 'number',
        required: false,
        showRequired: false,
        disabled: true,
        visible: false,
        noAutocomplete: true,
        maxLength: 20,
        gridColumns: 2,
      },
      {
        property: 'productGrossWeight',
        label: 'Peso Bruto Produto',
        type: 'number',
        required: false,
        showRequired: false,
        disabled: true,
        visible: false,
        noAutocomplete: true,
        maxLength: 20,
        gridColumns: 2,
      },
      {
        property: 'packagingFormat',
        label: 'Formato Embalagem',
        type: 'string',
        required: false,
        showRequired: false,
        disabled: false,
        visible: false,
        noAutocomplete: true,
        maxLength: 3,
        gridColumns: 2,
      },
    ]
  }

  public get getLoadingLocations(): Array<any> {
    return this.loadingLocations;
  }
  
  public isQuotationBranch(loadingLocation: string): boolean {
    return this.loadingLocations.find(loc => loc.value === loadingLocation)?.isQuotation ?? false;
  }

}
